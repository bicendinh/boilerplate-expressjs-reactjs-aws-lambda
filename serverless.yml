# serverless.yml

service: expressjs-reactjs-aws-lambda

	
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-s3-sync

package: 
  patterns:
    - '!frontend/**'
    - '!README.md'

custom:
  tableName: 'todo-${self:provider.stage}'
  siteName: 'bicen-dinh-todo-${self:provider.stage}'
  projectName: expressjs-reactjs-aws-lambda
  apiLambda: app
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: frontend/build
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  apiGateway:
    usagePlan:
      quota:
        limit: 50
        period: MONTH
      throttle:
        burstLimit: 10
        rateLimit: 5
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["TodosDynamoDBTable", "Arn" ] }
  environment:
    TODOS_TABLE: ${self:custom.tableName}

functions:
  app:
    name: ${self:custom.projectName}-${self:custom.apiLambda}
    handler: index.handler


resources:
  Resources:
    TodosDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
           -
            AttributeName: itemId
            AttributeType: S
        KeySchema:
          -
            AttributeName: itemId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: todo-api
    ApiGatewayV1Resource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt: [ ApiGatewayRestApi , RootResourceId]
        PathPart: api
        RestApiId: !Ref ApiGatewayRestApi
    ApiGatewayTodoResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref ApiGatewayV1Resource
        PathPart: '{proxy+}'
        RestApiId: !Ref ApiGatewayRestApi
    ApiGatewayCreateResourceGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: ANY
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri: !Join
            - ''
            - - "arn:aws:apigateway:"
              - Ref: 'AWS::Region'
              - ":lambda:path/2015-03-31/functions/arn:aws:lambda:"
              - Ref: 'AWS::Region'
              - ":"
              - Ref: 'AWS::AccountId'
              - ":function:"
              - ${self:custom.projectName}
              - "-"
              - ${self:custom.apiLambda}
              - "/invocations"
        MethodResponses:
          - StatusCode: 200
        ResourceId: !Ref ApiGatewayTodoResource
        RestApiId: !Ref ApiGatewayRestApi
      DependsOn: ApiLambdaPermission
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - ApiGatewayCreateResourceGetMethod
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        StageName: prod
    ApiLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: ${self:custom.projectName}-${self:custom.apiLambda}
        Principal: apigateway.amazonaws.com
      DependsOn: AppLambdaFunction
    WebpageCDN:
      Type: AWS::CloudFront::Distribution
      DependsOn: #without those explicit depends, the creation just fails
        - ApiGatewayDeployment
        - StaticSite
      Properties:
        DistributionConfig:
          DefaultCacheBehavior: #this section defines attached behaviors, first the S3 origin
            ForwardedValues:
              QueryString: true
            TargetOriginId: webpage #name of the origin
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors: #second the behavior for the API Gateway
            - AllowedMethods: #allow all method for the backend to implement
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              ForwardedValues:
                Headers: #define explicit headers, since API Gateway doesn't work otherwise
                  - Accept
                  - Referer
                  - Athorization
                  - Content-Type
                QueryString: true #to transfer get parameters to the gateway
              PathPattern: "/api/*" #path pattern after the Gateway stage identifier.
              TargetOriginId: api #id of the orignin
              ViewerProtocolPolicy: https-only #API Gateway only support https
              MinTTL: 0 
              DefaultTTL: 86400 
              MaxTTL: 31536000
          DefaultRootObject: index.html
          Enabled: true
          Origins:
            - DomainName: #define the s3 origin
                Fn::GetAtt: [ StaticSite , "DomainName" ]
              Id: webpage
              S3OriginConfig:
                OriginAccessIdentity:
                  Ref: AWS::NoValue
            - DomainName: #define the API Gateway origin
                Fn::Join:
                  - ""
                  - - Ref: ApiGatewayRestApi
                    - ".execute-api."
                    - Ref: AWS::Region
                    - ".amazonaws.com"
              Id: api
              CustomOriginConfig:
                OriginProtocolPolicy: https-only #again API-Gateway only supports https
              OriginPath: /prod #name of the deployed stage
          PriceClass: PriceClass_100